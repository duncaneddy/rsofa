/* automatically generated by rust-bindgen 0.57.0 */

pub const DPI: f64 = 3.141592653589793;
pub const D2PI: f64 = 6.283185307179586;
pub const DR2D: f64 = 57.29577951308232;
pub const DR2AS: f64 = 206264.80624709636;
pub const TURNAS: f64 = 1296000.0;
pub const DTY: f64 = 365.242198781;
pub const DAYSEC: f64 = 86400.0;
pub const DJY: f64 = 365.25;
pub const DJC: f64 = 36525.0;
pub const DJM: f64 = 365250.0;
pub const DJ00: f64 = 2451545.0;
pub const DJM0: f64 = 2400000.5;
pub const DJM00: f64 = 51544.5;
pub const DJM77: f64 = 43144.0;
pub const TTMTAI: f64 = 32.184;
pub const CMPS: f64 = 299792458.0;
pub const WGS84: u32 = 1;
pub const GRS80: u32 = 2;
pub const WGS72: u32 = 3;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_15: u32 = 101500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_13_0: u32 = 130000;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_13_0: u32 = 130000;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
// pub const FP_NAN: u32 = 1;
// pub const FP_INFINITE: u32 = 2;
// pub const FP_ZERO: u32 = 3;
// pub const FP_NORMAL: u32 = 4;
// pub const FP_SUBNORMAL: u32 = 5;
// pub const FP_SUPERNORMAL: u32 = 6;
// pub const FP_ILOGB0: i32 = -2147483648;
// pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iauASTROM {
    pub pmt: f64,
    pub eb: [f64; 3usize],
    pub eh: [f64; 3usize],
    pub em: f64,
    pub v: [f64; 3usize],
    pub bm1: f64,
    pub bpn: [[f64; 3usize]; 3usize],
    pub along: f64,
    pub phi: f64,
    pub xpl: f64,
    pub ypl: f64,
    pub sphi: f64,
    pub cphi: f64,
    pub diurab: f64,
    pub eral: f64,
    pub refa: f64,
    pub refb: f64,
}
#[test]
fn bindgen_test_layout_iauASTROM() {
    assert_eq!(
        ::std::mem::size_of::<iauASTROM>(),
        248usize,
        concat!("Size of: ", stringify!(iauASTROM))
    );
    assert_eq!(
        ::std::mem::align_of::<iauASTROM>(),
        8usize,
        concat!("Alignment of ", stringify!(iauASTROM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).pmt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(pmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).eb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(eb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).eh as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(eh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).em as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(em)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).v as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).bm1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(bm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).bpn as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(bpn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).along as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(along)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).phi as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(phi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).xpl as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(xpl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).ypl as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(ypl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).sphi as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(sphi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).cphi as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(cphi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).diurab as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(diurab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).eral as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(eral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).refa as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(refa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauASTROM>())).refb as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(iauASTROM),
            "::",
            stringify!(refb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iauLDBODY {
    pub bm: f64,
    pub dl: f64,
    pub pv: [[f64; 3usize]; 2usize],
}
#[test]
fn bindgen_test_layout_iauLDBODY() {
    assert_eq!(
        ::std::mem::size_of::<iauLDBODY>(),
        64usize,
        concat!("Size of: ", stringify!(iauLDBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<iauLDBODY>(),
        8usize,
        concat!("Alignment of ", stringify!(iauLDBODY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauLDBODY>())).bm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iauLDBODY),
            "::",
            stringify!(bm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauLDBODY>())).dl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iauLDBODY),
            "::",
            stringify!(dl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iauLDBODY>())).pv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iauLDBODY),
            "::",
            stringify!(pv)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    assert_eq!(
        ::std::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::std::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__float2>())).__sinval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__float2>())).__cosval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__cosval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    assert_eq!(
        ::std::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::std::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__double2>())).__sinval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__double2>())).__cosval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__cosval)
        )
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    pub fn iauCal2jd(
        iy: ::std::os::raw::c_int,
        im: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        djm0: *mut f64,
        djm: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauEpb(dj1: f64, dj2: f64) -> f64;
}
extern "C" {
    pub fn iauEpb2jd(epb: f64, djm0: *mut f64, djm: *mut f64);
}
extern "C" {
    pub fn iauEpj(dj1: f64, dj2: f64) -> f64;
}
extern "C" {
    pub fn iauEpj2jd(epj: f64, djm0: *mut f64, djm: *mut f64);
}
extern "C" {
    pub fn iauJd2cal(
        dj1: f64,
        dj2: f64,
        iy: *mut ::std::os::raw::c_int,
        im: *mut ::std::os::raw::c_int,
        id: *mut ::std::os::raw::c_int,
        fd: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauJdcalf(
        ndp: ::std::os::raw::c_int,
        dj1: f64,
        dj2: f64,
        iymdf: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAb(pnat: *mut f64, v: *mut f64, s: f64, bm1: f64, ppr: *mut f64);
}
extern "C" {
    pub fn iauApcg(
        date1: f64,
        date2: f64,
        ebpv: *mut [f64; 3usize],
        ehp: *mut f64,
        astrom: *mut iauASTROM,
    );
}
extern "C" {
    pub fn iauApcg13(date1: f64, date2: f64, astrom: *mut iauASTROM);
}
extern "C" {
    pub fn iauApci(
        date1: f64,
        date2: f64,
        ebpv: *mut [f64; 3usize],
        ehp: *mut f64,
        x: f64,
        y: f64,
        s: f64,
        astrom: *mut iauASTROM,
    );
}
extern "C" {
    pub fn iauApci13(date1: f64, date2: f64, astrom: *mut iauASTROM, eo: *mut f64);
}
extern "C" {
    pub fn iauApco(
        date1: f64,
        date2: f64,
        ebpv: *mut [f64; 3usize],
        ehp: *mut f64,
        x: f64,
        y: f64,
        s: f64,
        theta: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        sp: f64,
        refa: f64,
        refb: f64,
        astrom: *mut iauASTROM,
    );
}
extern "C" {
    pub fn iauApco13(
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        astrom: *mut iauASTROM,
        eo: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauApcs(
        date1: f64,
        date2: f64,
        pv: *mut [f64; 3usize],
        ebpv: *mut [f64; 3usize],
        ehp: *mut f64,
        astrom: *mut iauASTROM,
    );
}
extern "C" {
    pub fn iauApcs13(date1: f64, date2: f64, pv: *mut [f64; 3usize], astrom: *mut iauASTROM);
}
extern "C" {
    pub fn iauAper(theta: f64, astrom: *mut iauASTROM);
}
extern "C" {
    pub fn iauAper13(ut11: f64, ut12: f64, astrom: *mut iauASTROM);
}
extern "C" {
    pub fn iauApio(
        sp: f64,
        theta: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        refa: f64,
        refb: f64,
        astrom: *mut iauASTROM,
    );
}
extern "C" {
    pub fn iauApio13(
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        astrom: *mut iauASTROM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAtci13(
        rc: f64,
        dc: f64,
        pr: f64,
        pd: f64,
        px: f64,
        rv: f64,
        date1: f64,
        date2: f64,
        ri: *mut f64,
        di: *mut f64,
        eo: *mut f64,
    );
}
extern "C" {
    pub fn iauAtciq(
        rc: f64,
        dc: f64,
        pr: f64,
        pd: f64,
        px: f64,
        rv: f64,
        astrom: *mut iauASTROM,
        ri: *mut f64,
        di: *mut f64,
    );
}
extern "C" {
    pub fn iauAtciqn(
        rc: f64,
        dc: f64,
        pr: f64,
        pd: f64,
        px: f64,
        rv: f64,
        astrom: *mut iauASTROM,
        n: ::std::os::raw::c_int,
        b: *mut iauLDBODY,
        ri: *mut f64,
        di: *mut f64,
    );
}
extern "C" {
    pub fn iauAtciqz(rc: f64, dc: f64, astrom: *mut iauASTROM, ri: *mut f64, di: *mut f64);
}
extern "C" {
    pub fn iauAtco13(
        rc: f64,
        dc: f64,
        pr: f64,
        pd: f64,
        px: f64,
        rv: f64,
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        aob: *mut f64,
        zob: *mut f64,
        hob: *mut f64,
        dob: *mut f64,
        rob: *mut f64,
        eo: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAtic13(
        ri: f64,
        di: f64,
        date1: f64,
        date2: f64,
        rc: *mut f64,
        dc: *mut f64,
        eo: *mut f64,
    );
}
extern "C" {
    pub fn iauAticq(ri: f64, di: f64, astrom: *mut iauASTROM, rc: *mut f64, dc: *mut f64);
}
extern "C" {
    pub fn iauAticqn(
        ri: f64,
        di: f64,
        astrom: *mut iauASTROM,
        n: ::std::os::raw::c_int,
        b: *mut iauLDBODY,
        rc: *mut f64,
        dc: *mut f64,
    );
}
extern "C" {
    pub fn iauAtio13(
        ri: f64,
        di: f64,
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        aob: *mut f64,
        zob: *mut f64,
        hob: *mut f64,
        dob: *mut f64,
        rob: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAtioq(
        ri: f64,
        di: f64,
        astrom: *mut iauASTROM,
        aob: *mut f64,
        zob: *mut f64,
        hob: *mut f64,
        dob: *mut f64,
        rob: *mut f64,
    );
}
extern "C" {
    pub fn iauAtoc13(
        type_: *const ::std::os::raw::c_char,
        ob1: f64,
        ob2: f64,
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        rc: *mut f64,
        dc: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAtoi13(
        type_: *const ::std::os::raw::c_char,
        ob1: f64,
        ob2: f64,
        utc1: f64,
        utc2: f64,
        dut1: f64,
        elong: f64,
        phi: f64,
        hm: f64,
        xp: f64,
        yp: f64,
        phpa: f64,
        tc: f64,
        rh: f64,
        wl: f64,
        ri: *mut f64,
        di: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAtoiq(
        type_: *const ::std::os::raw::c_char,
        ob1: f64,
        ob2: f64,
        astrom: *mut iauASTROM,
        ri: *mut f64,
        di: *mut f64,
    );
}
extern "C" {
    pub fn iauLd(bm: f64, p: *mut f64, q: *mut f64, e: *mut f64, em: f64, dlim: f64, p1: *mut f64);
}
extern "C" {
    pub fn iauLdn(
        n: ::std::os::raw::c_int,
        b: *mut iauLDBODY,
        ob: *mut f64,
        sc: *mut f64,
        sn: *mut f64,
    );
}
extern "C" {
    pub fn iauLdsun(p: *mut f64, e: *mut f64, em: f64, p1: *mut f64);
}
extern "C" {
    pub fn iauPmpx(
        rc: f64,
        dc: f64,
        pr: f64,
        pd: f64,
        px: f64,
        rv: f64,
        pmt: f64,
        pob: *mut f64,
        pco: *mut f64,
    );
}
extern "C" {
    pub fn iauPmsafe(
        ra1: f64,
        dec1: f64,
        pmr1: f64,
        pmd1: f64,
        px1: f64,
        rv1: f64,
        ep1a: f64,
        ep1b: f64,
        ep2a: f64,
        ep2b: f64,
        ra2: *mut f64,
        dec2: *mut f64,
        pmr2: *mut f64,
        pmd2: *mut f64,
        px2: *mut f64,
        rv2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauPvtob(
        elong: f64,
        phi: f64,
        height: f64,
        xp: f64,
        yp: f64,
        sp: f64,
        theta: f64,
        pv: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauRefco(phpa: f64, tc: f64, rh: f64, wl: f64, refa: *mut f64, refb: *mut f64);
}
extern "C" {
    pub fn iauEpv00(
        date1: f64,
        date2: f64,
        pvh: *mut [f64; 3usize],
        pvb: *mut [f64; 3usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauPlan94(
        date1: f64,
        date2: f64,
        np: ::std::os::raw::c_int,
        pv: *mut [f64; 3usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauFad03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFae03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFaf03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFaju03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFal03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFalp03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFama03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFame03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFane03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFaom03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFapa03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFasa03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFaur03(t: f64) -> f64;
}
extern "C" {
    pub fn iauFave03(t: f64) -> f64;
}
extern "C" {
    pub fn iauBi00(dpsibi: *mut f64, depsbi: *mut f64, dra: *mut f64);
}
extern "C" {
    pub fn iauBp00(
        date1: f64,
        date2: f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauBp06(
        date1: f64,
        date2: f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauBpn2xy(rbpn: *mut [f64; 3usize], x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn iauC2i00a(date1: f64, date2: f64, rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2i00b(date1: f64, date2: f64, rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2i06a(date1: f64, date2: f64, rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2ibpn(date1: f64, date2: f64, rbpn: *mut [f64; 3usize], rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2ixy(date1: f64, date2: f64, x: f64, y: f64, rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2ixys(x: f64, y: f64, s: f64, rc2i: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauC2t00a(
        tta: f64,
        ttb: f64,
        uta: f64,
        utb: f64,
        xp: f64,
        yp: f64,
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2t00b(
        tta: f64,
        ttb: f64,
        uta: f64,
        utb: f64,
        xp: f64,
        yp: f64,
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2t06a(
        tta: f64,
        ttb: f64,
        uta: f64,
        utb: f64,
        xp: f64,
        yp: f64,
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2tcio(
        rc2i: *mut [f64; 3usize],
        era: f64,
        rpom: *mut [f64; 3usize],
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2teqx(
        rbpn: *mut [f64; 3usize],
        gst: f64,
        rpom: *mut [f64; 3usize],
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2tpe(
        tta: f64,
        ttb: f64,
        uta: f64,
        utb: f64,
        dpsi: f64,
        deps: f64,
        xp: f64,
        yp: f64,
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauC2txy(
        tta: f64,
        ttb: f64,
        uta: f64,
        utb: f64,
        x: f64,
        y: f64,
        xp: f64,
        yp: f64,
        rc2t: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauEo06a(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEors(rnpb: *mut [f64; 3usize], s: f64) -> f64;
}
extern "C" {
    pub fn iauFw2m(gamb: f64, phib: f64, psi: f64, eps: f64, r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauFw2xy(gamb: f64, phib: f64, psi: f64, eps: f64, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn iauLtp(epj: f64, rp: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauLtpb(epj: f64, rpb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauLtpecl(epj: f64, vec: *mut f64);
}
extern "C" {
    pub fn iauLtpequ(epj: f64, veq: *mut f64);
}
extern "C" {
    pub fn iauNum00a(date1: f64, date2: f64, rmatn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauNum00b(date1: f64, date2: f64, rmatn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauNum06a(date1: f64, date2: f64, rmatn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauNumat(epsa: f64, dpsi: f64, deps: f64, rmatn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauNut00a(date1: f64, date2: f64, dpsi: *mut f64, deps: *mut f64);
}
extern "C" {
    pub fn iauNut00b(date1: f64, date2: f64, dpsi: *mut f64, deps: *mut f64);
}
extern "C" {
    pub fn iauNut06a(date1: f64, date2: f64, dpsi: *mut f64, deps: *mut f64);
}
extern "C" {
    pub fn iauNut80(date1: f64, date2: f64, dpsi: *mut f64, deps: *mut f64);
}
extern "C" {
    pub fn iauNutm80(date1: f64, date2: f64, rmatn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauObl06(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauObl80(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauP06e(
        date1: f64,
        date2: f64,
        eps0: *mut f64,
        psia: *mut f64,
        oma: *mut f64,
        bpa: *mut f64,
        bqa: *mut f64,
        pia: *mut f64,
        bpia: *mut f64,
        epsa: *mut f64,
        chia: *mut f64,
        za: *mut f64,
        zetaa: *mut f64,
        thetaa: *mut f64,
        pa: *mut f64,
        gam: *mut f64,
        phi: *mut f64,
        psi: *mut f64,
    );
}
extern "C" {
    pub fn iauPb06(date1: f64, date2: f64, bzeta: *mut f64, bz: *mut f64, btheta: *mut f64);
}
extern "C" {
    pub fn iauPfw06(
        date1: f64,
        date2: f64,
        gamb: *mut f64,
        phib: *mut f64,
        psib: *mut f64,
        epsa: *mut f64,
    );
}
extern "C" {
    pub fn iauPmat00(date1: f64, date2: f64, rbp: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPmat06(date1: f64, date2: f64, rbp: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPmat76(date1: f64, date2: f64, rmatp: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPn00(
        date1: f64,
        date2: f64,
        dpsi: f64,
        deps: f64,
        epsa: *mut f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
        rn: *mut [f64; 3usize],
        rbpn: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauPn00a(
        date1: f64,
        date2: f64,
        dpsi: *mut f64,
        deps: *mut f64,
        epsa: *mut f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
        rn: *mut [f64; 3usize],
        rbpn: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauPn00b(
        date1: f64,
        date2: f64,
        dpsi: *mut f64,
        deps: *mut f64,
        epsa: *mut f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
        rn: *mut [f64; 3usize],
        rbpn: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauPn06(
        date1: f64,
        date2: f64,
        dpsi: f64,
        deps: f64,
        epsa: *mut f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
        rn: *mut [f64; 3usize],
        rbpn: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauPn06a(
        date1: f64,
        date2: f64,
        dpsi: *mut f64,
        deps: *mut f64,
        epsa: *mut f64,
        rb: *mut [f64; 3usize],
        rp: *mut [f64; 3usize],
        rbp: *mut [f64; 3usize],
        rn: *mut [f64; 3usize],
        rbpn: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn iauPnm00a(date1: f64, date2: f64, rbpn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPnm00b(date1: f64, date2: f64, rbpn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPnm06a(date1: f64, date2: f64, rnpb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPnm80(date1: f64, date2: f64, rmatpn: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPom00(xp: f64, yp: f64, sp: f64, rpom: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPr00(date1: f64, date2: f64, dpsipr: *mut f64, depspr: *mut f64);
}
extern "C" {
    pub fn iauPrec76(
        date01: f64,
        date02: f64,
        date11: f64,
        date12: f64,
        zeta: *mut f64,
        z: *mut f64,
        theta: *mut f64,
    );
}
extern "C" {
    pub fn iauS00(date1: f64, date2: f64, x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn iauS00a(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauS00b(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauS06(date1: f64, date2: f64, x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn iauS06a(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauSp00(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauXy06(date1: f64, date2: f64, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn iauXys00a(date1: f64, date2: f64, x: *mut f64, y: *mut f64, s: *mut f64);
}
extern "C" {
    pub fn iauXys00b(date1: f64, date2: f64, x: *mut f64, y: *mut f64, s: *mut f64);
}
extern "C" {
    pub fn iauXys06a(date1: f64, date2: f64, x: *mut f64, y: *mut f64, s: *mut f64);
}
extern "C" {
    pub fn iauEe00(date1: f64, date2: f64, epsa: f64, dpsi: f64) -> f64;
}
extern "C" {
    pub fn iauEe00a(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEe00b(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEe06a(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEect00(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEqeq94(date1: f64, date2: f64) -> f64;
}
extern "C" {
    pub fn iauEra00(dj1: f64, dj2: f64) -> f64;
}
extern "C" {
    pub fn iauGmst00(uta: f64, utb: f64, tta: f64, ttb: f64) -> f64;
}
extern "C" {
    pub fn iauGmst06(uta: f64, utb: f64, tta: f64, ttb: f64) -> f64;
}
extern "C" {
    pub fn iauGmst82(dj1: f64, dj2: f64) -> f64;
}
extern "C" {
    pub fn iauGst00a(uta: f64, utb: f64, tta: f64, ttb: f64) -> f64;
}
extern "C" {
    pub fn iauGst00b(uta: f64, utb: f64) -> f64;
}
extern "C" {
    pub fn iauGst06(uta: f64, utb: f64, tta: f64, ttb: f64, rnpb: *mut [f64; 3usize]) -> f64;
}
extern "C" {
    pub fn iauGst06a(uta: f64, utb: f64, tta: f64, ttb: f64) -> f64;
}
extern "C" {
    pub fn iauGst94(uta: f64, utb: f64) -> f64;
}
extern "C" {
    pub fn iauPvstar(
        pv: *mut [f64; 3usize],
        ra: *mut f64,
        dec: *mut f64,
        pmr: *mut f64,
        pmd: *mut f64,
        px: *mut f64,
        rv: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauStarpv(
        ra: f64,
        dec: f64,
        pmr: f64,
        pmd: f64,
        px: f64,
        rv: f64,
        pv: *mut [f64; 3usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauFk425(
        r1950: f64,
        d1950: f64,
        dr1950: f64,
        dd1950: f64,
        p1950: f64,
        v1950: f64,
        r2000: *mut f64,
        d2000: *mut f64,
        dr2000: *mut f64,
        dd2000: *mut f64,
        p2000: *mut f64,
        v2000: *mut f64,
    );
}
extern "C" {
    pub fn iauFk45z(r1950: f64, d1950: f64, bepoch: f64, r2000: *mut f64, d2000: *mut f64);
}
extern "C" {
    pub fn iauFk524(
        r2000: f64,
        d2000: f64,
        dr2000: f64,
        dd2000: f64,
        p2000: f64,
        v2000: f64,
        r1950: *mut f64,
        d1950: *mut f64,
        dr1950: *mut f64,
        dd1950: *mut f64,
        p1950: *mut f64,
        v1950: *mut f64,
    );
}
extern "C" {
    pub fn iauFk52h(
        r5: f64,
        d5: f64,
        dr5: f64,
        dd5: f64,
        px5: f64,
        rv5: f64,
        rh: *mut f64,
        dh: *mut f64,
        drh: *mut f64,
        ddh: *mut f64,
        pxh: *mut f64,
        rvh: *mut f64,
    );
}
extern "C" {
    pub fn iauFk54z(
        r2000: f64,
        d2000: f64,
        bepoch: f64,
        r1950: *mut f64,
        d1950: *mut f64,
        dr1950: *mut f64,
        dd1950: *mut f64,
    );
}
extern "C" {
    pub fn iauFk5hip(r5h: *mut [f64; 3usize], s5h: *mut f64);
}
extern "C" {
    pub fn iauFk5hz(r5: f64, d5: f64, date1: f64, date2: f64, rh: *mut f64, dh: *mut f64);
}
extern "C" {
    pub fn iauH2fk5(
        rh: f64,
        dh: f64,
        drh: f64,
        ddh: f64,
        pxh: f64,
        rvh: f64,
        r5: *mut f64,
        d5: *mut f64,
        dr5: *mut f64,
        dd5: *mut f64,
        px5: *mut f64,
        rv5: *mut f64,
    );
}
extern "C" {
    pub fn iauHfk5z(
        rh: f64,
        dh: f64,
        date1: f64,
        date2: f64,
        r5: *mut f64,
        d5: *mut f64,
        dr5: *mut f64,
        dd5: *mut f64,
    );
}
extern "C" {
    pub fn iauStarpm(
        ra1: f64,
        dec1: f64,
        pmr1: f64,
        pmd1: f64,
        px1: f64,
        rv1: f64,
        ep1a: f64,
        ep1b: f64,
        ep2a: f64,
        ep2b: f64,
        ra2: *mut f64,
        dec2: *mut f64,
        pmr2: *mut f64,
        pmd2: *mut f64,
        px2: *mut f64,
        rv2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauEceq06(date1: f64, date2: f64, dl: f64, db: f64, dr: *mut f64, dd: *mut f64);
}
extern "C" {
    pub fn iauEcm06(date1: f64, date2: f64, rm: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauEqec06(date1: f64, date2: f64, dr: f64, dd: f64, dl: *mut f64, db: *mut f64);
}
extern "C" {
    pub fn iauLteceq(epj: f64, dl: f64, db: f64, dr: *mut f64, dd: *mut f64);
}
extern "C" {
    pub fn iauLtecm(epj: f64, rm: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauLteqec(epj: f64, dr: f64, dd: f64, dl: *mut f64, db: *mut f64);
}
extern "C" {
    pub fn iauG2icrs(dl: f64, db: f64, dr: *mut f64, dd: *mut f64);
}
extern "C" {
    pub fn iauIcrs2g(dr: f64, dd: f64, dl: *mut f64, db: *mut f64);
}
extern "C" {
    pub fn iauEform(n: ::std::os::raw::c_int, a: *mut f64, f: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauGc2gd(
        n: ::std::os::raw::c_int,
        xyz: *mut f64,
        elong: *mut f64,
        phi: *mut f64,
        height: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauGc2gde(
        a: f64,
        f: f64,
        xyz: *mut f64,
        elong: *mut f64,
        phi: *mut f64,
        height: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauGd2gc(
        n: ::std::os::raw::c_int,
        elong: f64,
        phi: f64,
        height: f64,
        xyz: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauGd2gce(
        a: f64,
        f: f64,
        elong: f64,
        phi: f64,
        height: f64,
        xyz: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauD2dtf(
        scale: *const ::std::os::raw::c_char,
        ndp: ::std::os::raw::c_int,
        d1: f64,
        d2: f64,
        iy: *mut ::std::os::raw::c_int,
        im: *mut ::std::os::raw::c_int,
        id: *mut ::std::os::raw::c_int,
        ihmsf: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauDat(
        iy: ::std::os::raw::c_int,
        im: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        fd: f64,
        deltat: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauDtdb(date1: f64, date2: f64, ut: f64, elong: f64, u: f64, v: f64) -> f64;
}
extern "C" {
    pub fn iauDtf2d(
        scale: *const ::std::os::raw::c_char,
        iy: ::std::os::raw::c_int,
        im: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        ihr: ::std::os::raw::c_int,
        imn: ::std::os::raw::c_int,
        sec: f64,
        d1: *mut f64,
        d2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTaitt(tai1: f64, tai2: f64, tt1: *mut f64, tt2: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTaiut1(
        tai1: f64,
        tai2: f64,
        dta: f64,
        ut11: *mut f64,
        ut12: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTaiutc(tai1: f64, tai2: f64, utc1: *mut f64, utc2: *mut f64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTcbtdb(tcb1: f64, tcb2: f64, tdb1: *mut f64, tdb2: *mut f64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTcgtt(tcg1: f64, tcg2: f64, tt1: *mut f64, tt2: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTdbtcb(tdb1: f64, tdb2: f64, tcb1: *mut f64, tcb2: *mut f64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTdbtt(
        tdb1: f64,
        tdb2: f64,
        dtr: f64,
        tt1: *mut f64,
        tt2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTttai(tt1: f64, tt2: f64, tai1: *mut f64, tai2: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTttcg(tt1: f64, tt2: f64, tcg1: *mut f64, tcg2: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTttdb(
        tt1: f64,
        tt2: f64,
        dtr: f64,
        tdb1: *mut f64,
        tdb2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTtut1(
        tt1: f64,
        tt2: f64,
        dt: f64,
        ut11: *mut f64,
        ut12: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauUt1tai(
        ut11: f64,
        ut12: f64,
        dta: f64,
        tai1: *mut f64,
        tai2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauUt1tt(
        ut11: f64,
        ut12: f64,
        dt: f64,
        tt1: *mut f64,
        tt2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauUt1utc(
        ut11: f64,
        ut12: f64,
        dut1: f64,
        utc1: *mut f64,
        utc2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauUtctai(utc1: f64, utc2: f64, tai1: *mut f64, tai2: *mut f64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauUtcut1(
        utc1: f64,
        utc2: f64,
        dut1: f64,
        ut11: *mut f64,
        ut12: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAe2hd(az: f64, el: f64, phi: f64, ha: *mut f64, dec: *mut f64);
}
extern "C" {
    pub fn iauHd2ae(ha: f64, dec: f64, phi: f64, az: *mut f64, el: *mut f64);
}
extern "C" {
    pub fn iauHd2pa(ha: f64, dec: f64, phi: f64) -> f64;
}
extern "C" {
    pub fn iauTpors(
        xi: f64,
        eta: f64,
        a: f64,
        b: f64,
        a01: *mut f64,
        b01: *mut f64,
        a02: *mut f64,
        b02: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTporv(
        xi: f64,
        eta: f64,
        v: *mut f64,
        v01: *mut f64,
        v02: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTpsts(xi: f64, eta: f64, a0: f64, b0: f64, a: *mut f64, b: *mut f64);
}
extern "C" {
    pub fn iauTpstv(xi: f64, eta: f64, v0: *mut f64, v: *mut f64);
}
extern "C" {
    pub fn iauTpxes(
        a: f64,
        b: f64,
        a0: f64,
        b0: f64,
        xi: *mut f64,
        eta: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTpxev(
        v: *mut f64,
        v0: *mut f64,
        xi: *mut f64,
        eta: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauA2af(
        ndp: ::std::os::raw::c_int,
        angle: f64,
        sign: *mut ::std::os::raw::c_char,
        idmsf: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iauA2tf(
        ndp: ::std::os::raw::c_int,
        angle: f64,
        sign: *mut ::std::os::raw::c_char,
        ihmsf: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iauAf2a(
        s: ::std::os::raw::c_char,
        ideg: ::std::os::raw::c_int,
        iamin: ::std::os::raw::c_int,
        asec: f64,
        rad: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauAnp(a: f64) -> f64;
}
extern "C" {
    pub fn iauAnpm(a: f64) -> f64;
}
extern "C" {
    pub fn iauD2tf(
        ndp: ::std::os::raw::c_int,
        days: f64,
        sign: *mut ::std::os::raw::c_char,
        ihmsf: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iauTf2a(
        s: ::std::os::raw::c_char,
        ihour: ::std::os::raw::c_int,
        imin: ::std::os::raw::c_int,
        sec: f64,
        rad: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauTf2d(
        s: ::std::os::raw::c_char,
        ihour: ::std::os::raw::c_int,
        imin: ::std::os::raw::c_int,
        sec: f64,
        days: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iauRx(phi: f64, r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauRy(theta: f64, r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauRz(psi: f64, r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauCp(p: *mut f64, c: *mut f64);
}
extern "C" {
    pub fn iauCpv(pv: *mut [f64; 3usize], c: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauCr(r: *mut [f64; 3usize], c: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauP2pv(p: *mut f64, pv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPv2p(pv: *mut [f64; 3usize], p: *mut f64);
}
extern "C" {
    pub fn iauIr(r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauZp(p: *mut f64);
}
extern "C" {
    pub fn iauZpv(pv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauZr(r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauRxr(a: *mut [f64; 3usize], b: *mut [f64; 3usize], atb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauTr(r: *mut [f64; 3usize], rt: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauRxp(r: *mut [f64; 3usize], p: *mut f64, rp: *mut f64);
}
extern "C" {
    pub fn iauRxpv(r: *mut [f64; 3usize], pv: *mut [f64; 3usize], rpv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauTrxp(r: *mut [f64; 3usize], p: *mut f64, trp: *mut f64);
}
extern "C" {
    pub fn iauTrxpv(r: *mut [f64; 3usize], pv: *mut [f64; 3usize], trpv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauRm2v(r: *mut [f64; 3usize], w: *mut f64);
}
extern "C" {
    pub fn iauRv2m(w: *mut f64, r: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPap(a: *mut f64, b: *mut f64) -> f64;
}
extern "C" {
    pub fn iauPas(al: f64, ap: f64, bl: f64, bp: f64) -> f64;
}
extern "C" {
    pub fn iauSepp(a: *mut f64, b: *mut f64) -> f64;
}
extern "C" {
    pub fn iauSeps(al: f64, ap: f64, bl: f64, bp: f64) -> f64;
}
extern "C" {
    pub fn iauC2s(p: *mut f64, theta: *mut f64, phi: *mut f64);
}
extern "C" {
    pub fn iauP2s(p: *mut f64, theta: *mut f64, phi: *mut f64, r: *mut f64);
}
extern "C" {
    pub fn iauPv2s(
        pv: *mut [f64; 3usize],
        theta: *mut f64,
        phi: *mut f64,
        r: *mut f64,
        td: *mut f64,
        pd: *mut f64,
        rd: *mut f64,
    );
}
extern "C" {
    pub fn iauS2c(theta: f64, phi: f64, c: *mut f64);
}
extern "C" {
    pub fn iauS2p(theta: f64, phi: f64, r: f64, p: *mut f64);
}
extern "C" {
    pub fn iauS2pv(theta: f64, phi: f64, r: f64, td: f64, pd: f64, rd: f64, pv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPdp(a: *mut f64, b: *mut f64) -> f64;
}
extern "C" {
    pub fn iauPm(p: *mut f64) -> f64;
}
extern "C" {
    pub fn iauPmp(a: *mut f64, b: *mut f64, amb: *mut f64);
}
extern "C" {
    pub fn iauPn(p: *mut f64, r: *mut f64, u: *mut f64);
}
extern "C" {
    pub fn iauPpp(a: *mut f64, b: *mut f64, apb: *mut f64);
}
extern "C" {
    pub fn iauPpsp(a: *mut f64, s: f64, b: *mut f64, apsb: *mut f64);
}
extern "C" {
    pub fn iauPvdpv(a: *mut [f64; 3usize], b: *mut [f64; 3usize], adb: *mut f64);
}
extern "C" {
    pub fn iauPvm(pv: *mut [f64; 3usize], r: *mut f64, s: *mut f64);
}
extern "C" {
    pub fn iauPvmpv(a: *mut [f64; 3usize], b: *mut [f64; 3usize], amb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPvppv(a: *mut [f64; 3usize], b: *mut [f64; 3usize], apb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPvu(dt: f64, pv: *mut [f64; 3usize], upv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPvup(dt: f64, pv: *mut [f64; 3usize], p: *mut f64);
}
extern "C" {
    pub fn iauPvxpv(a: *mut [f64; 3usize], b: *mut [f64; 3usize], axb: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauPxp(a: *mut f64, b: *mut f64, axb: *mut f64);
}
extern "C" {
    pub fn iauS2xpv(s1: f64, s2: f64, pv: *mut [f64; 3usize], spv: *mut [f64; 3usize]);
}
extern "C" {
    pub fn iauSxp(s: f64, p: *mut f64, sp: *mut f64);
}
extern "C" {
    pub fn iauSxpv(s: f64, pv: *mut [f64; 3usize], spv: *mut [f64; 3usize]);
}
